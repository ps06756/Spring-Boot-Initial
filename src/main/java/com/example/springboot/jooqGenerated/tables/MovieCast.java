/*
 * This file is generated by jOOQ.
 */
package com.example.springboot.jooqGenerated.tables;


import com.example.springboot.jooqGenerated.Keys;
import com.example.springboot.jooqGenerated.Movies;
import com.example.springboot.jooqGenerated.tables.records.MovieCastRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MovieCast extends TableImpl<MovieCastRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>movies.movie_cast</code>
     */
    public static final MovieCast MOVIE_CAST = new MovieCast();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MovieCastRecord> getRecordType() {
        return MovieCastRecord.class;
    }

    /**
     * The column <code>movies.movie_cast.movie_id</code>.
     */
    public final TableField<MovieCastRecord, Integer> MOVIE_ID = createField(DSL.name("movie_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>movies.movie_cast.person_id</code>.
     */
    public final TableField<MovieCastRecord, Integer> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>movies.movie_cast.character_name</code>.
     */
    public final TableField<MovieCastRecord, String> CHARACTER_NAME = createField(DSL.name("character_name"), SQLDataType.VARCHAR(400), this, "");

    /**
     * The column <code>movies.movie_cast.gender_id</code>.
     */
    public final TableField<MovieCastRecord, Integer> GENDER_ID = createField(DSL.name("gender_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>movies.movie_cast.cast_order</code>.
     */
    public final TableField<MovieCastRecord, Integer> CAST_ORDER = createField(DSL.name("cast_order"), SQLDataType.INTEGER, this, "");

    private MovieCast(Name alias, Table<MovieCastRecord> aliased) {
        this(alias, aliased, null);
    }

    private MovieCast(Name alias, Table<MovieCastRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>movies.movie_cast</code> table reference
     */
    public MovieCast(String alias) {
        this(DSL.name(alias), MOVIE_CAST);
    }

    /**
     * Create an aliased <code>movies.movie_cast</code> table reference
     */
    public MovieCast(Name alias) {
        this(alias, MOVIE_CAST);
    }

    /**
     * Create a <code>movies.movie_cast</code> table reference
     */
    public MovieCast() {
        this(DSL.name("movie_cast"), null);
    }

    public <O extends Record> MovieCast(Table<O> child, ForeignKey<O, MovieCastRecord> key) {
        super(child, key, MOVIE_CAST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Movies.MOVIES;
    }

    @Override
    public List<ForeignKey<MovieCastRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_MCA_MOVIE, Keys.FK_MCA_PER, Keys.FK_MCA_GENDER);
    }

    private transient Movie _movie;
    private transient Person _person;
    private transient Gender _gender;

    /**
     * Get the implicit join path to the <code>movies.movie</code> table.
     */
    public Movie movie() {
        if (_movie == null)
            _movie = new Movie(this, Keys.FK_MCA_MOVIE);

        return _movie;
    }

    /**
     * Get the implicit join path to the <code>movies.person</code> table.
     */
    public Person person() {
        if (_person == null)
            _person = new Person(this, Keys.FK_MCA_PER);

        return _person;
    }

    /**
     * Get the implicit join path to the <code>movies.gender</code> table.
     */
    public Gender gender() {
        if (_gender == null)
            _gender = new Gender(this, Keys.FK_MCA_GENDER);

        return _gender;
    }

    @Override
    public MovieCast as(String alias) {
        return new MovieCast(DSL.name(alias), this);
    }

    @Override
    public MovieCast as(Name alias) {
        return new MovieCast(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieCast rename(String name) {
        return new MovieCast(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieCast rename(Name name) {
        return new MovieCast(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
