/*
 * This file is generated by jOOQ.
 */
package com.example.springboot.jooqGenerated.tables;


import com.example.springboot.jooqGenerated.Keys;
import com.example.springboot.jooqGenerated.Movies;
import com.example.springboot.jooqGenerated.tables.records.LanguageRoleRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LanguageRole extends TableImpl<LanguageRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>movies.language_role</code>
     */
    public static final LanguageRole LANGUAGE_ROLE = new LanguageRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LanguageRoleRecord> getRecordType() {
        return LanguageRoleRecord.class;
    }

    /**
     * The column <code>movies.language_role.role_id</code>.
     */
    public final TableField<LanguageRoleRecord, Integer> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>movies.language_role.language_role</code>.
     */
    public final TableField<LanguageRoleRecord, String> LANGUAGE_ROLE_ = createField(DSL.name("language_role"), SQLDataType.VARCHAR(20), this, "");

    private LanguageRole(Name alias, Table<LanguageRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private LanguageRole(Name alias, Table<LanguageRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>movies.language_role</code> table reference
     */
    public LanguageRole(String alias) {
        this(DSL.name(alias), LANGUAGE_ROLE);
    }

    /**
     * Create an aliased <code>movies.language_role</code> table reference
     */
    public LanguageRole(Name alias) {
        this(alias, LANGUAGE_ROLE);
    }

    /**
     * Create a <code>movies.language_role</code> table reference
     */
    public LanguageRole() {
        this(DSL.name("language_role"), null);
    }

    public <O extends Record> LanguageRole(Table<O> child, ForeignKey<O, LanguageRoleRecord> key) {
        super(child, key, LANGUAGE_ROLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Movies.MOVIES;
    }

    @Override
    public UniqueKey<LanguageRoleRecord> getPrimaryKey() {
        return Keys.KEY_LANGUAGE_ROLE_PRIMARY;
    }

    @Override
    public LanguageRole as(String alias) {
        return new LanguageRole(DSL.name(alias), this);
    }

    @Override
    public LanguageRole as(Name alias) {
        return new LanguageRole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LanguageRole rename(String name) {
        return new LanguageRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LanguageRole rename(Name name) {
        return new LanguageRole(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
