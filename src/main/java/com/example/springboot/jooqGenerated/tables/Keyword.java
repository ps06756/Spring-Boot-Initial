/*
 * This file is generated by jOOQ.
 */
package com.example.springboot.jooqGenerated.tables;


import com.example.springboot.jooqGenerated.Keys;
import com.example.springboot.jooqGenerated.Movies;
import com.example.springboot.jooqGenerated.tables.records.KeywordRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keyword extends TableImpl<KeywordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>movies.keyword</code>
     */
    public static final Keyword KEYWORD = new Keyword();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KeywordRecord> getRecordType() {
        return KeywordRecord.class;
    }

    /**
     * The column <code>movies.keyword.keyword_id</code>.
     */
    public final TableField<KeywordRecord, Integer> KEYWORD_ID = createField(DSL.name("keyword_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>movies.keyword.keyword_name</code>.
     */
    public final TableField<KeywordRecord, String> KEYWORD_NAME = createField(DSL.name("keyword_name"), SQLDataType.VARCHAR(100), this, "");

    private Keyword(Name alias, Table<KeywordRecord> aliased) {
        this(alias, aliased, null);
    }

    private Keyword(Name alias, Table<KeywordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>movies.keyword</code> table reference
     */
    public Keyword(String alias) {
        this(DSL.name(alias), KEYWORD);
    }

    /**
     * Create an aliased <code>movies.keyword</code> table reference
     */
    public Keyword(Name alias) {
        this(alias, KEYWORD);
    }

    /**
     * Create a <code>movies.keyword</code> table reference
     */
    public Keyword() {
        this(DSL.name("keyword"), null);
    }

    public <O extends Record> Keyword(Table<O> child, ForeignKey<O, KeywordRecord> key) {
        super(child, key, KEYWORD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Movies.MOVIES;
    }

    @Override
    public UniqueKey<KeywordRecord> getPrimaryKey() {
        return Keys.KEY_KEYWORD_PRIMARY;
    }

    @Override
    public Keyword as(String alias) {
        return new Keyword(DSL.name(alias), this);
    }

    @Override
    public Keyword as(Name alias) {
        return new Keyword(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Keyword rename(String name) {
        return new Keyword(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Keyword rename(Name name) {
        return new Keyword(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
