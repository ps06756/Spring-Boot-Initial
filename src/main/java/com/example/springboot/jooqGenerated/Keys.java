/*
 * This file is generated by jOOQ.
 */
package com.example.springboot.jooqGenerated;


import com.example.springboot.jooqGenerated.tables.Country;
import com.example.springboot.jooqGenerated.tables.Department;
import com.example.springboot.jooqGenerated.tables.Gender;
import com.example.springboot.jooqGenerated.tables.Genre;
import com.example.springboot.jooqGenerated.tables.Keyword;
import com.example.springboot.jooqGenerated.tables.Language;
import com.example.springboot.jooqGenerated.tables.LanguageRole;
import com.example.springboot.jooqGenerated.tables.Movie;
import com.example.springboot.jooqGenerated.tables.MovieCast;
import com.example.springboot.jooqGenerated.tables.MovieCompany;
import com.example.springboot.jooqGenerated.tables.MovieCrew;
import com.example.springboot.jooqGenerated.tables.MovieGenres;
import com.example.springboot.jooqGenerated.tables.MovieKeywords;
import com.example.springboot.jooqGenerated.tables.MovieLanguages;
import com.example.springboot.jooqGenerated.tables.Person;
import com.example.springboot.jooqGenerated.tables.ProductionCompany;
import com.example.springboot.jooqGenerated.tables.ProductionCountry;
import com.example.springboot.jooqGenerated.tables.records.CountryRecord;
import com.example.springboot.jooqGenerated.tables.records.DepartmentRecord;
import com.example.springboot.jooqGenerated.tables.records.GenderRecord;
import com.example.springboot.jooqGenerated.tables.records.GenreRecord;
import com.example.springboot.jooqGenerated.tables.records.KeywordRecord;
import com.example.springboot.jooqGenerated.tables.records.LanguageRecord;
import com.example.springboot.jooqGenerated.tables.records.LanguageRoleRecord;
import com.example.springboot.jooqGenerated.tables.records.MovieCastRecord;
import com.example.springboot.jooqGenerated.tables.records.MovieCompanyRecord;
import com.example.springboot.jooqGenerated.tables.records.MovieCrewRecord;
import com.example.springboot.jooqGenerated.tables.records.MovieGenresRecord;
import com.example.springboot.jooqGenerated.tables.records.MovieKeywordsRecord;
import com.example.springboot.jooqGenerated.tables.records.MovieLanguagesRecord;
import com.example.springboot.jooqGenerated.tables.records.MovieRecord;
import com.example.springboot.jooqGenerated.tables.records.PersonRecord;
import com.example.springboot.jooqGenerated.tables.records.ProductionCompanyRecord;
import com.example.springboot.jooqGenerated.tables.records.ProductionCountryRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * movies.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CountryRecord> KEY_COUNTRY_PRIMARY = Internal.createUniqueKey(Country.COUNTRY, DSL.name("KEY_country_PRIMARY"), new TableField[] { Country.COUNTRY.COUNTRY_ID }, true);
    public static final UniqueKey<DepartmentRecord> KEY_DEPARTMENT_PRIMARY = Internal.createUniqueKey(Department.DEPARTMENT, DSL.name("KEY_department_PRIMARY"), new TableField[] { Department.DEPARTMENT.DEPARTMENT_ID }, true);
    public static final UniqueKey<GenderRecord> KEY_GENDER_PRIMARY = Internal.createUniqueKey(Gender.GENDER, DSL.name("KEY_gender_PRIMARY"), new TableField[] { Gender.GENDER.GENDER_ID }, true);
    public static final UniqueKey<GenreRecord> KEY_GENRE_PRIMARY = Internal.createUniqueKey(Genre.GENRE, DSL.name("KEY_genre_PRIMARY"), new TableField[] { Genre.GENRE.GENRE_ID }, true);
    public static final UniqueKey<KeywordRecord> KEY_KEYWORD_PRIMARY = Internal.createUniqueKey(Keyword.KEYWORD, DSL.name("KEY_keyword_PRIMARY"), new TableField[] { Keyword.KEYWORD.KEYWORD_ID }, true);
    public static final UniqueKey<LanguageRecord> KEY_LANGUAGE_PRIMARY = Internal.createUniqueKey(Language.LANGUAGE, DSL.name("KEY_language_PRIMARY"), new TableField[] { Language.LANGUAGE.LANGUAGE_ID }, true);
    public static final UniqueKey<LanguageRoleRecord> KEY_LANGUAGE_ROLE_PRIMARY = Internal.createUniqueKey(LanguageRole.LANGUAGE_ROLE, DSL.name("KEY_language_role_PRIMARY"), new TableField[] { LanguageRole.LANGUAGE_ROLE.ROLE_ID }, true);
    public static final UniqueKey<MovieRecord> KEY_MOVIE_PRIMARY = Internal.createUniqueKey(Movie.MOVIE, DSL.name("KEY_movie_PRIMARY"), new TableField[] { Movie.MOVIE.MOVIE_ID }, true);
    public static final UniqueKey<PersonRecord> KEY_PERSON_PRIMARY = Internal.createUniqueKey(Person.PERSON, DSL.name("KEY_person_PRIMARY"), new TableField[] { Person.PERSON.PERSON_ID }, true);
    public static final UniqueKey<ProductionCompanyRecord> KEY_PRODUCTION_COMPANY_PRIMARY = Internal.createUniqueKey(ProductionCompany.PRODUCTION_COMPANY, DSL.name("KEY_production_company_PRIMARY"), new TableField[] { ProductionCompany.PRODUCTION_COMPANY.COMPANY_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<MovieCastRecord, GenderRecord> FK_MCA_GENDER = Internal.createForeignKey(MovieCast.MOVIE_CAST, DSL.name("fk_mca_gender"), new TableField[] { MovieCast.MOVIE_CAST.GENDER_ID }, Keys.KEY_GENDER_PRIMARY, new TableField[] { Gender.GENDER.GENDER_ID }, true);
    public static final ForeignKey<MovieCastRecord, MovieRecord> FK_MCA_MOVIE = Internal.createForeignKey(MovieCast.MOVIE_CAST, DSL.name("fk_mca_movie"), new TableField[] { MovieCast.MOVIE_CAST.MOVIE_ID }, Keys.KEY_MOVIE_PRIMARY, new TableField[] { Movie.MOVIE.MOVIE_ID }, true);
    public static final ForeignKey<MovieCastRecord, PersonRecord> FK_MCA_PER = Internal.createForeignKey(MovieCast.MOVIE_CAST, DSL.name("fk_mca_per"), new TableField[] { MovieCast.MOVIE_CAST.PERSON_ID }, Keys.KEY_PERSON_PRIMARY, new TableField[] { Person.PERSON.PERSON_ID }, true);
    public static final ForeignKey<MovieCompanyRecord, ProductionCompanyRecord> FK_MC_COMP = Internal.createForeignKey(MovieCompany.MOVIE_COMPANY, DSL.name("fk_mc_comp"), new TableField[] { MovieCompany.MOVIE_COMPANY.COMPANY_ID }, Keys.KEY_PRODUCTION_COMPANY_PRIMARY, new TableField[] { ProductionCompany.PRODUCTION_COMPANY.COMPANY_ID }, true);
    public static final ForeignKey<MovieCompanyRecord, MovieRecord> FK_MC_MOVIE = Internal.createForeignKey(MovieCompany.MOVIE_COMPANY, DSL.name("fk_mc_movie"), new TableField[] { MovieCompany.MOVIE_COMPANY.MOVIE_ID }, Keys.KEY_MOVIE_PRIMARY, new TableField[] { Movie.MOVIE.MOVIE_ID }, true);
    public static final ForeignKey<MovieCrewRecord, DepartmentRecord> FK_MCR_DEPT = Internal.createForeignKey(MovieCrew.MOVIE_CREW, DSL.name("fk_mcr_dept"), new TableField[] { MovieCrew.MOVIE_CREW.DEPARTMENT_ID }, Keys.KEY_DEPARTMENT_PRIMARY, new TableField[] { Department.DEPARTMENT.DEPARTMENT_ID }, true);
    public static final ForeignKey<MovieCrewRecord, MovieRecord> FK_MCR_MOVIE = Internal.createForeignKey(MovieCrew.MOVIE_CREW, DSL.name("fk_mcr_movie"), new TableField[] { MovieCrew.MOVIE_CREW.MOVIE_ID }, Keys.KEY_MOVIE_PRIMARY, new TableField[] { Movie.MOVIE.MOVIE_ID }, true);
    public static final ForeignKey<MovieCrewRecord, PersonRecord> FK_MCR_PER = Internal.createForeignKey(MovieCrew.MOVIE_CREW, DSL.name("fk_mcr_per"), new TableField[] { MovieCrew.MOVIE_CREW.PERSON_ID }, Keys.KEY_PERSON_PRIMARY, new TableField[] { Person.PERSON.PERSON_ID }, true);
    public static final ForeignKey<MovieGenresRecord, GenreRecord> FK_MG_GENRE = Internal.createForeignKey(MovieGenres.MOVIE_GENRES, DSL.name("fk_mg_genre"), new TableField[] { MovieGenres.MOVIE_GENRES.GENRE_ID }, Keys.KEY_GENRE_PRIMARY, new TableField[] { Genre.GENRE.GENRE_ID }, true);
    public static final ForeignKey<MovieGenresRecord, MovieRecord> FK_MG_MOVIE = Internal.createForeignKey(MovieGenres.MOVIE_GENRES, DSL.name("fk_mg_movie"), new TableField[] { MovieGenres.MOVIE_GENRES.MOVIE_ID }, Keys.KEY_MOVIE_PRIMARY, new TableField[] { Movie.MOVIE.MOVIE_ID }, true);
    public static final ForeignKey<MovieKeywordsRecord, KeywordRecord> FK_MK_KEYWORD = Internal.createForeignKey(MovieKeywords.MOVIE_KEYWORDS, DSL.name("fk_mk_keyword"), new TableField[] { MovieKeywords.MOVIE_KEYWORDS.KEYWORD_ID }, Keys.KEY_KEYWORD_PRIMARY, new TableField[] { Keyword.KEYWORD.KEYWORD_ID }, true);
    public static final ForeignKey<MovieKeywordsRecord, MovieRecord> FK_MK_MOVIE = Internal.createForeignKey(MovieKeywords.MOVIE_KEYWORDS, DSL.name("fk_mk_movie"), new TableField[] { MovieKeywords.MOVIE_KEYWORDS.MOVIE_ID }, Keys.KEY_MOVIE_PRIMARY, new TableField[] { Movie.MOVIE.MOVIE_ID }, true);
    public static final ForeignKey<MovieLanguagesRecord, LanguageRecord> FK_ML_LANG = Internal.createForeignKey(MovieLanguages.MOVIE_LANGUAGES, DSL.name("fk_ml_lang"), new TableField[] { MovieLanguages.MOVIE_LANGUAGES.LANGUAGE_ID }, Keys.KEY_LANGUAGE_PRIMARY, new TableField[] { Language.LANGUAGE.LANGUAGE_ID }, true);
    public static final ForeignKey<MovieLanguagesRecord, MovieRecord> FK_ML_MOVIE = Internal.createForeignKey(MovieLanguages.MOVIE_LANGUAGES, DSL.name("fk_ml_movie"), new TableField[] { MovieLanguages.MOVIE_LANGUAGES.MOVIE_ID }, Keys.KEY_MOVIE_PRIMARY, new TableField[] { Movie.MOVIE.MOVIE_ID }, true);
    public static final ForeignKey<MovieLanguagesRecord, LanguageRoleRecord> FK_ML_ROLE = Internal.createForeignKey(MovieLanguages.MOVIE_LANGUAGES, DSL.name("fk_ml_role"), new TableField[] { MovieLanguages.MOVIE_LANGUAGES.LANGUAGE_ROLE_ID }, Keys.KEY_LANGUAGE_ROLE_PRIMARY, new TableField[] { LanguageRole.LANGUAGE_ROLE.ROLE_ID }, true);
    public static final ForeignKey<ProductionCountryRecord, CountryRecord> FK_PC_COUNTRY = Internal.createForeignKey(ProductionCountry.PRODUCTION_COUNTRY, DSL.name("fk_pc_country"), new TableField[] { ProductionCountry.PRODUCTION_COUNTRY.COUNTRY_ID }, Keys.KEY_COUNTRY_PRIMARY, new TableField[] { Country.COUNTRY.COUNTRY_ID }, true);
    public static final ForeignKey<ProductionCountryRecord, MovieRecord> FK_PC_MOVIE = Internal.createForeignKey(ProductionCountry.PRODUCTION_COUNTRY, DSL.name("fk_pc_movie"), new TableField[] { ProductionCountry.PRODUCTION_COUNTRY.MOVIE_ID }, Keys.KEY_MOVIE_PRIMARY, new TableField[] { Movie.MOVIE.MOVIE_ID }, true);
}
